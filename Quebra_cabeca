#include <stdio.h> //biblioteca de entrada e saída
#include <stdlib.h> //biblioteca para usar o Printf e scanf
#include <iostream>
using std::cout;
using std::endl;
#include <windows.h>
#include <locale.h>
extern "C" { int getch(); }
//função para posicionamento
void gotoxy(int lin, int col)
{
	HANDLE hOut;
	COORD Position;
	hOut = GetStdHandle(STD_OUTPUT_HANDLE);
	Position.X = col;
	Position.Y = lin;
	SetConsoleCursorPosition(hOut, Position);
}
//função para desenhar o puzzle
void desenha_caixa()
{
	cout.flush();
	gotoxy(4, 2);
	cout << "\332\304\304\304\302\304\304\304\302\304\304\304\277";
	cout.flush();
	gotoxy(5, 2);
	cout << "\263 \263 \263 \263"; cout.flush();
	gotoxy(6, 2);
	cout << "\303\304\304\304\305\304\304\304\305\304\304\304\264";
	cout.flush();
	gotoxy(7, 2);
	cout << "\263 \263 \263 \263"; cout.flush();
	gotoxy(8, 2);
	cout << "\303\304\304\304\305\304\304\304\305\304\304\304\264";
	cout.flush();
	gotoxy(9, 2);
	cout << "\263 \263 \263 \263"; cout.flush();
	gotoxy(10, 2);
	cout << "\300\304\304\304\301\304\304\304\301\304\304\304\331";
	cout.flush();
}
void coloca_val(char mat[3][3]) //função para inserir o valor nos arrays
{
	for (int l = 0; l < 3; l++)
		for (int c = 0; c < 3; c++) {
			gotoxy(5 + l * 2, 4 + 4 * c);
			printf("%c", mat[l][c]);
		}
}
//função para verificar se o campo está disponível
int verifica(char tentativa[3][3], char objetivo[3][3])
{
	int i, j;
	for (i = 0; i < 3; i++)
		for (j = 0; j < 3; j++)
			if (tentativa[i][j] != objetivo[i][j])
				return 0;
	return 1;
}
/*Função que procura a posição do numero requisitado na matriz,
retorna false se não encontrou, se encontrou copia os valores
para col e lin*/
bool procura_numero(char puzzle[3][3], char val, int& col, int& lin)
{
	for (col = 0; col < 3; col++)
		for (lin = 0; lin < 3; lin++)
			if (puzzle[col][lin] == val)
				return true;
	return false;
}
//função para definir as regras dos movimentos
bool move(char tenta[3][3])
{
	int i, j, c, l;
	char valor;
	gotoxy(11, 1);
	cout << "\nValor a ser movido:"; cout.flush();
	valor = getch();
	if (valor == 's' || valor == 'S') // 's' ou 'S' sai do programa.
		exit(0);
	if ((valor < '0') && (valor > '9')) // Se a entrada for inválida não faz nada
		return 0;
	if (!(procura_numero(tenta, valor, c, l))) // Passa c e l por referência
		return false;
	if ((c < 2) && (tenta[c + 1][l] == ' ')) { // Checa se pode ir para frente.
		tenta[c + 1][l] = tenta[c][l];
		tenta[c][l] = ' ';
		return true;
	}
	if ((c > 0) && (tenta[c - 1][l] == ' ')) { // Checa se pode ir para trás.
		tenta[c - 1][l] = tenta[c][l];
		tenta[c][l] = ' ';
		return true;
	}
	if ((l > 0) && (tenta[c][l - 1] == ' ')) { // Checa se pode ir para cima.
		tenta[c][l - 1] = tenta[c][l];
		tenta[c][l] = ' ';
		return true;
	}
	if ((l < 2) && (tenta[c][l + 1] == ' ')) { // Checa se pode ir para baixo.
		tenta[c][l + 1] = tenta[c][l];
		tenta[c][l] = ' ';
		return true;
	}
	return false; // Se o movimento for inválido não faz nada.
}
//função principal e definição das variáveis
int main()
{
	char certa[3][3] = {
	{ ' ', '1', '2' },
	{ '3', '4', '5' },
	{ '6', '7', '8' } }; // objetivo
	char inicial[3][3] = {
	{ '8', '3', '1' },
	{ '6', ' ', '5' },
	{ '7', '2', '4' } };// bloco inicial definido pelo sistema
	char automatico[3][3];
	int preenche = 1;
	int oper = 0;
	int contHeuristica = 0;
	//introdução do jogo e posicionamento
	gotoxy(0, 0);
	cout << "Bloco Deslizante\n"; cout.flush();
	gotoxy(1, 0);
	cout << "Vamos ordenar deslizando os blocos pelos campos vazios!\n";
	cout.flush();
	gotoxy(2, 0);
	printf("Escolha qual o bloco inicial. Aleatorio = 1; Definido = 2:\t");
	scanf_s("%d", &oper);
	//Condição inicial do jogo| 1 para aleatório e 2 para definido pelo	sistema
		if (oper == 1)
		{ //laço para preencher todos os campos do puzzle
			while (preenche == 1) {
				int contadorMatrix = 0;
				char value;
				for (int col = 0; col < 3; col++) {
					for (int lin = 0; lin < 3; lin++) {
						int vazio = 0;
						do {
							vazio = 0;
							int a = rand() % 9;
							if (a == 0) {
								value = ' '; //o jogo entende que o 0 ficará vazio
							}
							else {
								value = a + '0';
							}
							for (int col2 = 0; col2 < 3; col2++) {
								for (int lin2 = 0; lin2 < 3; lin2++) {
									if (automatico[col2][lin2] ==
										value) {
										vazio = 1;
									}
								}
							}
						} while (vazio == 1);
						automatico[col][lin] = value;
						contadorMatrix++;
					}
				}
				if (contadorMatrix == 9) {
					preenche = 0;
				}
			}
			while (!verifica(automatico, certa)) {
				desenha_caixa();
				coloca_val(automatico);
				if (move(automatico)) {
					contHeuristica++;// contador dos movimentos, válido se obedecer a regra do jogo
				}//imprime na tela o contador
				gotoxy(13, 5);
				printf("\nA heuristica utilizada foi de: %d\n",
					contHeuristica);
				//caso não chegue o objetivo imprime na tela para continuar tentando
					gotoxy(15, 5);
				cout << "Continue tentando!\n"; cout.flush();
			}
			desenha_caixa();
			coloca_val(automatico);
		}
	if (oper == 2)
	{
		while (!verifica(inicial, certa)) {
			desenha_caixa();
			coloca_val(inicial);
			if (move(inicial)) {
				contHeuristica++;// contador dos movimentos, válido se obedecer a regra do jogo
			}
			//imprime na a heurística
			gotoxy(12, 5);
			printf("\nTemos uma heristica de 14\n");
			//imprime na tela o contador
			gotoxy(13, 5);
			printf("\nA heuristica utilizada foi de: %d\n", contHeuristica);
			//caso não chegue o objetivo imprime na tela para continuar tentando
				gotoxy(15, 5);
			cout << "Continue tentando!\n"; cout.flush();
		}
		desenha_caixa();
		coloca_val(inicial);
	}
	else//caso o valor seja !=de 1 ou 2 não desenha o puzzle
	{
		printf("Valor invalido!");
	}
	//quando o resultado é obtido imprime na tela
	gotoxy(15, 5);

	cout << "Atingiu o resultado!\n"; cout.flush();
	printf("Para sair digite S");
	getch();

	
	return 0;
}
